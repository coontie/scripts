#!/usr/bin/perl -w
use IO::Socket::Multicast;
use XML::Parser;
use XML::SimpleObject;
use Data::Dumper;
use threads;
use threads::shared;
use Mail::SendEasy;
use Thread::Queue;
use Time::Piece;

my $q = new Thread::Queue;

use strict;

my $DEBUG = 1;

#this is a hash of results for a given host and a given command
my %masterHash = ();

#this is a boolean flag hash, keeps track whether a problem has been reported or not
my %prevReported = ();

#this stores when the problem was reported, used by suppressNotify()
my %problemReportedTime = ();

#this stores when the problem was fixed, used by suppressNotify()
my %reportFixMsgTime = ();

#this is used to figure out whether to send "all OK" msg.  The hash value is set to 1 whenever there's a problem that needs to be reported,
#only then will an "all ok" msg be sent out.  Otherwise, if a problem report is suppressed, "all ok" is suppressed also (the value of this is 0)
my %reportFixMsg = ();

#every time a host checks in, "1" goes in here, this is then checked by checkAliveThread \
#every 40s
my %aliveHash : shared = ();

#for outbound
use constant DESTINATION => '239.1.1.2:2001'; 

#for inbound
use constant GROUP => '239.1.1.1';
use constant PORT  => '2000';

my $socketOut = IO::Socket::Multicast->new(Proto=>'udp',PeerAddr=>DESTINATION);
my $socketIn = IO::Socket::Multicast->new(Proto=>'udp',LocalPort=>PORT);
$socketIn->mcast_add(GROUP) || die "Couldn't set group: $!\n";
$socketOut->mcast_ttl(1);

#master xml config file
my $file = 'config.xml';
my $parser = XML::Parser->new(ErrorContext => 2, Style => "Tree");
my $xmlobj = XML::SimpleObject->new( $parser->parsefile($file) );

#this thread publishes the config file over multicast every 15s
my $publishConfigThread = threads->new(\&publishConfig); # Spawn the thread
$publishConfigThread->detach; # Now we officially don’t care any more

#this thread receives the results from the clients and puts them on a queue for processing
my $receiveResults = threads->new(\&receiveResults); # Spawn the thread
$receiveResults->detach; # Now we officially don’t care any more

#this thread periodically goes thru the list of clients to make sure the monitors are in contact
my $checkAliveThread = threads->new(\&checkAliveThread); # Spawn the thread
$checkAliveThread->detach; # Now we officially don’t care any more

#main driver
while (1) {
	#only do stuff if there are items pending in the queue, o/w just loop endlessly
	if ($q->pending > 0) {
		my $mainData = $q->dequeue;
		my ($fromHost, $commandType, $value) = "";
		($fromHost, $commandType, $value) = ( split (/:/, $mainData) ) [0,1,2];
		$masterHash{$fromHost}{$commandType} = $value;
		#set the flag to 1, host checked in OK
		$aliveHash{$fromHost} = 1;
		foreach my $host (keys(%masterHash)) {
			foreach my $cmdType (keys(%{$masterHash{$host}})) {
				#this is the result we got from the client over multicast
				my $cmdRcvdValue = $masterHash{$host}{$cmdType};
				#we are iterating over an array of XML::SimpleObject hashes, servers+attributes
				foreach my $servers ($xmlobj->child("config")->children("server")) {
					#get the name of each server
					my $server = $servers->attribute('name');
					foreach my $command ($servers->children('command')) {
						$_ = $host;
						if (/$server/) {	#does the current server name from xml match the hostname we got from multicast?
							my $commandAttribute = $command->attribute('type');
							if ($commandAttribute eq $cmdType) {
								my $cmdExpValue = $command->child('expected_value')->value;
								$cmdRcvdValue = 'NOTHING' unless defined ($cmdRcvdValue);
								#if the two are equal, it's because either a) everything is fine or b) a problem has been fixed
								if ($cmdExpValue eq $cmdRcvdValue) {
									if ( defined ($prevReported{$host}{$cmdType}) ) {
										if ($prevReported{$host}{$cmdType} eq 'TRUE') {   #aha - problem fixed!
											my $msg = "Previously reported problem with $cmdType on $host is now fixed.\n";
											sendMail($msg,$host) if okToComplain($host,$cmdType,"FIXED");
											logMsg($msg);
										}
									}
									$prevReported{$host}{$cmdType} = 'FALSE'; # no problems, resetting the flag
								}
								else { # uh oh -- PROBLEM!
									#complain unless Do Not Care is set -- this is a way to turn off monitoring
									#for a given command. Also, do not complain if we got back an empty value, --
									#we should always get smth back.

									#complain by default = 1
									my $complainFlag = 1;
									#turn off if DNC
									$complainFlag = 0 if ($cmdExpValue eq "DNC");
									#turn off if Empty value was received -- means p2psmon returned empty string
									$complainFlag = 0 if ($cmdRcvdValue eq "NOTHING");
									complain($host,$cmdType,$cmdExpValue,$cmdRcvdValue) unless ($complainFlag == 0);
								}
							} #end of if ($commandAttribute eq $cmdType)
						} #end of if (/$server/)
					} #end of foreach my $command ($servers->children('command'))
				} #end of foreach my $servers ($xmlobj->child("config")->children("server")) 
			} #end of foreach my $cmdType (keys(%{$masterHash{$host}})) 
		}
	}
}

sub okToComplain
{
	#max allowed time, in seconds, that must elapse before an email goes out.  Used to prevent flapping msgs from flooding mailboxes.
	my $acceptableDelta = 30;
	my $myhost 	= $_[0];
	my $mycommand	= $_[1];
	#is it a 'problem fixed' msg or a 'new problem' msg?
	my $msgType 	= $_[2];
	my $t = localtime;
	#convert to epoch seconds
	#my $currentTime = $t->epoch;
	my $currentTime = $t;
	my $delta = 0;

	#complain if the msg is "all ok" and the problem has previously been reported.
	return 1 if (($msgType eq "FIXED") and ($reportFixMsg{$myhost}{$mycommand}));

	print "inside oktocomplain \n" if $DEBUG;
	#if defined then this problem has happened before, let's see how long ago
	if ($problemReportedTime{$myhost}{$mycommand}) {
		use Time::Seconds;
		$delta = $currentTime - $problemReportedTime{$myhost}{$mycommand};
		print "var defined, delta is $delta type is $msgType \n" if $DEBUG;
	} 
	else {	#nop, never happened, set the problem time to currentTime and return 1 -- ok to complain
		$problemReportedTime{$myhost}{$mycommand} = $currentTime;
		print "var not def, delta is $delta type is $msgType \n" if $DEBUG;
		return 1;
	}

	if ($delta<$acceptableDelta) {	#if less than what's allowed
		print "delta $delta no good, be quiet \n" if $DEBUG;
		$reportFixMsg{$myhost}{$mycommand} = 0;
		return 0;					#return 0 --> be quiet
	}
	else {
		print "delta $delta is too large, complain! \n" if $DEBUG;
		#we're reporting a problem, make sure to report the fix when it comes => set it to 1
		$reportFixMsg{$myhost}{$mycommand} = 1;
		#complain and reset the timer to currentTime
		$problemReportedTime{$myhost}{$mycommand} = 0;
		return 1;
	}
}



sub complain
{
    my $problemHost    	= $_[0];
    my $problemCmd 	= $_[1];
    my $expectedValue  	= $_[2];
    my $valueGotInstead	= $_[3];
    #we have to set this in case the problem already exists upon server startup
    #which leads to $prevReported being undefined
    $prevReported{$problemHost}{$problemCmd} = 'FALSE' unless defined ($prevReported{$problemHost}{$problemCmd});
    #only complain if it hasn't been reported previously
    #that way we don't mailbomb people with the same problem.
	if ($prevReported{$problemHost}{$problemCmd} eq 'FALSE') {
			my $msg = "When $problemHost checked $problemCmd it expected $expectedValue but got $valueGotInstead instead.";
			sendMail($msg,$problemHost) if okToComplain($problemHost,$problemCmd,"PROBLEM");
			logMsg($msg);
			$prevReported{$problemHost}{$problemCmd} = 'TRUE';
	}
}

sub logMsg
{
    open (LOGFILE, ">>./server.log");
    my $currentDate = `date`; 
    chomp ($currentDate);
    my $msgToLog = $_[0];
    print LOGFILE $currentDate . ":" . $msgToLog . "\n";
    close (LOGFILE);
}

sub sendMail
{

    my $to = 'ikantor@caxton.com';
    my $from = 'unix@caxton.com';

    my $msgToSend = $_[0];
    my $sourceHost = $_[1];

	$_ = $msgToSend;
	
	my $subject = "";	

	if (/fix/)
	{
    	$subject = "RMDS Problem fixed report from " . $sourceHost;
	}

	if (/Lost/)
	{
    	$subject = "RMDS Problem : lost comms with the monitor on " . $sourceHost;
	}

	if (/Restored/)
	{
    	$subject = "RMDS Problem : restored comms with the  monitor on " . $sourceHost;
	}

	if (/When/)
	{
		$subject = "RMDS Problem report from " . $sourceHost;
	}
		

    my $mail = new Mail::SendEasy(
	    smtp => 'cnyexchfe01' ,
	    ) ;

	print "SENDING AN EMAIL \n";
#    my $status = $mail->send(
#	    from    => 'unix@caxton.com' ,
#	    from_title => 'RMDS Monitor' ,
#	    reply   => $from ,
#	    error   => $from ,
#	    to      => $to ,
#	    subject => $subject ,
#	    msg     => "$msgToSend" ,
#	    html    => "<b>$msgToSend</b>" ,
#	    msgid   => "0101" ,
#	    ) ;

#    if (!$status) { print $mail->error ;}

}

sub receiveResults
{
    while (1) {
	my $data = '';
	$socketIn->recv($data,1024);
	chomp ($data);
	$q->enqueue($data);
	#print "Recvd $data \n";
	#print "FROM THREAD: " . $q->pending . "items in the queue \n";
    }
}
	
sub checkAliveThread
{
	my %hLostComms = ();
	while (1) {
		foreach my $server (keys %aliveHash) {
			if ($aliveHash{$server} == 0) {
				my $msg = "Lost communication with the monitor on $server";
				$hLostComms{$server} = 0 unless defined $hLostComms{$server};
				if ($hLostComms{$server} == 0) {
					logMsg($msg);
					sendMail($msg,$server);
					#set the flag to 1 -- send the emails once only.
					$hLostComms{$server} = 1;
				}
			}
			else {
					#everything checks out -- reset the flag
					#when the main thread encounters this client, it'll set it back to 1
					#for those that have not communicated, the 0 will be left in place,
					#triggering the true clause above
				if ( defined ($hLostComms{$server}) ) {
					#alive...
					if ( $hLostComms{$server} == 1) {
						#...but used to be down -- now back up!
						my $msg = "Restored communication with the monitor on $server";
						logMsg($msg);
						sendMail($msg,$server);
						#turn the flag off
						$hLostComms{$server} = 0;
					}
				}
				$aliveHash{$server} = 0;
			}
		}   #end of foreach
		sleep 40;
	}	#end of while (1)
}

sub publishConfig
{
    while (1) {
    #this code traverses the entire config file.
	foreach my $servers ($xmlobj->child("config")->children("server")) {
	    my $server = $servers->attribute('name');
	    foreach my $command ($servers->children('command')) {
		my $commandAttribute = $command->attribute('type');
		my $commandExecValue = $command->child('exec')->value;
		my $final = "$server:$commandAttribute:$commandExecValue";
		#print "publishing $final \n";
		$socketOut->send($final) || die "Couldn't send: $!";
	    }
	}
	sleep 30;
    } #end of while
} #end of publishConfig sub
