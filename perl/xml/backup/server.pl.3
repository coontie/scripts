#!/usr/bin/perl -w
use IO::Socket::Multicast;
use XML::Parser;
use XML::SimpleObject;
use Data::Dumper;
use threads;
use threads::shared;

use strict;

#for outbound
use constant DESTINATION => '226.1.1.2:2001'; 

#for inbound
use constant GROUP => '226.1.1.1';
use constant PORT  => '2000';

my $socketOut = IO::Socket::Multicast->new(Proto=>'udp',PeerAddr=>DESTINATION);
my $socketIn = IO::Socket::Multicast->new(Proto=>'udp',LocalPort=>PORT);
$socketIn->mcast_add(GROUP) || die "Couldn't set group: $!\n";

my $file = 'config.xml';
my $parser = XML::Parser->new(ErrorContext => 2, Style => "Tree");
my $xmlobj = XML::SimpleObject->new( $parser->parsefile($file) );

my $publishConfigThread = threads->new(\&publishConfig); # Spawn the thread
$publishConfigThread->detach; # Now we officially donâ€™t care any more


while (1) {
	#$socketOut->send("OK") || die "Couldn't send: $!";
	print "OK \n";
	sleep 1;

}


sub publishConfig
{
	while (1) {

		#this code traverses the entire config file.
		foreach my $servers ($xmlobj->child("config")->children("server")) {
			my $server = $servers->attribute('name');
			foreach my $command ($servers->children('command')) {
				my $commandAttribute = $command->attribute('type');
				my $commandExecValue = $command->child('exec')->value;
				my $final = "$server:$commandAttribute:$commandExecValue";
				print "final is $final \n";
				$socketOut->send($final) || die "Couldn't send: $!";
			}
			print "____________________\n";
		}

		sleep 1;
	} #end of while

} #end of publishConfig sub

